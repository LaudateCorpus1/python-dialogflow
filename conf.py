# -*- coding: utf-8 -*-
#
# google-cloud-dialogflow documentation build configuration file
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import shlex
import shutil
from pathlib import Path

from sphinx.util import logging

logger = logging.getLogger(__name__)

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath(".."))

# For plugins that can not read conf.py.
# See also: https://github.com/docascode/sphinx-docfx-yaml/issues/85
sys.path.insert(0, os.path.abspath("."))

__version__ = ""

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "1.5.5"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.intersphinx",
    "sphinx.ext.coverage",
    "sphinx.ext.doctest",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "recommonmark",
]

# autodoc/autosummary flags
autoclass_content = "both"
autodoc_default_options = {"members": True}
autosummary_generate = True


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = [".rst", ".md"]

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = u"google-cloud-dialogflow"
copyright = u"2019, Google"
author = u"Google APIs"

# Static HTML pages, e.g. to support redirects
# See: https://tech.signavio.com/2017/managing-sphinx-redirects
# HTML pages to be copied from source to target
# list obtained with glob.glob("**/*.html", recursive=True)
static_html_pages = [
    "search.html",
    "404.html",
    "index.html",
    "latest/changelog.html",
    "latest/v2beta1.html",
    "latest/v2.html",
    "latest/index.html",
    "latest/gapic/v2/types.html",
    "latest/gapic/v2/api.html",
    "latest/gapic/v2beta1/types.html",
    "latest/gapic/v2beta1/api.html",
    "stable/changelog.html",
    "stable/v2beta1.html",
    "stable/v2.html",
    "stable/index.html",
    "stable/gapic/v2/types.html",
    "stable/gapic/v2/api.html",
    "stable/gapic/v2beta1/types.html",
    "stable/gapic/v2beta1/api.html",
]


def copy_static_html_pages(app, exception):
    logger.info("Copying static html pages...")
    if exception is None and (
        app.builder.name == "html" or app.builder.name == "readthedocs"
    ):
        for static_html_page in static_html_pages:
            target_path = Path(app.outdir + "/" + static_html_page)
            src_path = Path(app.srcdir + "/" + static_html_page)
            if os.path.isfile(src_path):
                logger.info("Copying static html: %s -> %s", src_path, target_path)
                if not target_path.parent.exists():
                    target_path.parent.mkdir(parents=True)
                shutil.copyfile(src_path, target_path)


def setup(app):
    app.connect("build-finished", copy_static_html_pages)
